pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "Maven3"
    }
    stages{
        /*stage('Checkout') {
            steps{
                git branch: 'main', credentialsId: '623f3a75-c41f-4943-975c-6ccf9ec3cba1', url: 'https://github.com/samv1214/devSecOps-ak'
            }
        }*/

        stage('Build') {
            steps{
                sh 'mvn -f MyWebApp/pom.xml clean install'
            }
        }
        

        stage('Code Quality-SonarQube'){
            steps{
                withSonarQubeEnv('SonarQube') {
                    sh '$MVN_HOME/bin/mvn -f MyWebApp/pom.xml sonar:sonar'
                }
            }
        }

        stage('Code Coverage-Jacoco'){
            steps{
                jacoco()
            }
        }

        stage('Artifact Deployment-Nexus'){
            steps{
                nexusArtifactUploader artifacts: [[artifactId: 'MyWebApp', classifier: '', file: 'MyWebApp/target/MyWebApp.war', type: 'war']], credentialsId: '62a04e44-252f-4df2-9bac-7b519ffc53aa', groupId: 'com.dept.app', nexusUrl: 'ec2-3-85-30-207.compute-1.amazonaws.com:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'maven-snapshots', version: '1.0-SNAPSHOT'
            }
        }

        stage('Dev Deploy') {
            steps{
                deploy adapters: [tomcat9(credentialsId: '849bcfba-7458-481e-9358-630940ceb373', path: '', url: 'http://ec2-44-202-159-125.compute-1.amazonaws.com:8080')], contextPath: null, war: '**/*.war'
            }
        }

        stage('Slack Notification'){
            steps{
                slackSend (channel: 'all-jenkins-testing', message: "Job is successful, here is the info - Job '${env.JOB_NAME}'/ '${env.BUILD_NUMBER}'/ '${env.BUILD_URL}")
            }
        }
    }
}
